# print("File number: %s\t%s ", file_number, file)
xmldoc <- read_xml(file, encoding = "utf-8", as_html = FALSE)
l<- c()
xml_value <- function(x) {
result <- xmldoc %>%
xml_find_all(x) %>%
xml_text()
return(result)
}
calculate_WandH <- function(max_value,min_value){
for( i in 1:length(max_value)) {
result <- max_value[[i]] - min_value[[i]]
l <- c(l,result)
}
return(l)
}
filenames <- tools::file_path_sans_ext(xml_value(".//filename"))
Label <- xml_value(".//name")
Xmin <- as.double(xml_value(".//xmin"))
Ymin <- as.double(xml_value(".//ymin"))
Xmax <- as.double(xml_value(".//xmax"))
Ymax<- as.double(xml_value(".//ymax"))
Width <- calculate_WandH(Xmax , Xmin)
Height <- calculate_WandH(Ymax , Ymin)
df <- tibble(filenames = filenames,x = Xmin, y = Ymin, Width = Width,Height = Height, Label = Label)
DF <- rbind(DF, df)
file_number = file_number + 1
}
PersonsRelatedObjs = DF %>%  select(filenames, Label) %>% mutate(Persons = strsplit(filenames, "_")[2])
View(PersonsRelatedObjs)
PersonsRelatedObjs = DF %>%  select(filenames, Label) %>% mutate(Persons = (strsplit(filenames, "_")[1])
View(PersonsRelatedObjs)
View(PersonsRelatedObjs)
PersonsRelatedObjs = DF %>%  select(filenames, Label)
View(PersonsRelatedObjs)
PersonsRelatedObjs = DF %>%  select(filenames, Label) %>% mutate(Persons = str_replace(filenames, '_.*', ''))
View(PersonsRelatedObjs)
PersonsRelatedObjs = DF  %>% mutate(Persons = str_replace(filenames, '_.*', '')) %>%  select(Persons, Label)
View(PersonsRelatedObjs)
class(DF)
library(tidyverse)
bookings <- read_csv("~/OVGU_Courses/DataScienceWithR/DataSciR20/datasets/bookings.csv")
bookings_by_type <- bookings %>% group_by(for_business)
View(bookings_by_type)
View(bookings)
View(bookings_by_type)
class(bookings_by_type)
bookings %>%
group_by(for_business) %>%
summarize(
n = n(),
review_mean = mean(review_score, na.rm = TRUE)
)
PersonsRelatedObjs %>% group_by(Persons) %>% summarize(n = n())
PersonsRelatedObjs %>% group_by(Label) %>% summarize(n = n())
n_distinct(bookings$property_id)
bookings %>% mutate(total_price = sum(price_per_night)/n())
AvgPrice <- bookings %>% mutate(total_price = sum(price_per_night)/n())
View(AvgPrice)
BookingsByPropertyID <- AvgPrice %>% group_by(property_id)
Price <- bookings %>% mutate(total_price = sum(price_per_night)/n()) %>% group_by(property_id) %>% filter(price_per_night >total_price) %>% select(property_id,price_per_night)
View(Price)
Price <- bookings %>% mutate(total_price = sum(price_per_night)) %>% group_by(property_id) %>% filter(price_per_night >total_price) %>% select(property_id,price_per_night)
View(Price)
PersonsRelatedObjs %>% count(Persons,Label)
properties <- read_csv("~/OVGU_Courses/DataScienceWithR/DataSciR20/datasets/properties.csv")
View(properties)
PropandBook <- full_join(bookings,properties , by = "property_id")
View(PropandBook)
numberOfBokkingsPercity <- PropandBook %>%  count(destination)
View(numberOfBokkingsPercity)
day_order <- c("mon", "tue", "wed", "thu", "fri", "sat", "sun")
df <- bookings %>% inner_join(properties, by = "property_id")
checkin_count <- df %>%
count(destination, checkin_day) %>%
mutate(checkin_day = factor(checkin_day, levels = day_order))
checkin_count
checkin_count %>% pivot_wider(names_from = checkin_day , values_from = n)
checkin_count %>%
arrange(checkin_day) %>%
pivot_wider(names_from = checkin_day, values_from = n)
# Your turn 8 ----
# Actually, we don't need to store the property facilities as tibble, since the column `facility_nr` is redundant.
#
# We change the `facilities` column to a list column, such that each element is a character vector of property facilities.
#
properties_l <- properties %>%
mutate(facilities = strsplit(facilities, ","))
checkin_count %>%
pivot_wider(names_from = checkin_day,
values_from = n) %>%
pivot_longer(cols = -destination,
names_to = "checkin_day",
values_to = "n")
View(properties)
View(bookings)
bookings %>% mutate(for_business = factor(for_business , levels = ("business" ,"tourist" )))
bookings %>% mutate(for_business = factor(for_business , levels = "business"))
bookings %>% mutate(for_business = factor(for_business , levels = "tourist" ))
bookings %>% mutate(for_business = factor(for_business , levels = lev ))
lev <- c("business" , "tourist")
bookings %>% mutate(for_business = factor(for_business , levels = lev ))
bookings %>% pivot_wider(names_from = property_id , values_from = review_score)
book <- bookings %>% pivot_wider(names_from = property_id , values_from = review_score)
View(book)
View(book)
bookings %>% mutate(for_business = factor(for_business , levels = lev ))
book <- bookings %>% pivot_wider(names_from = for_business , values_from = review_score)
View(book)
bookings %>% mutate(for_business = factor(for_business , levels = lev ))
lev <- c("business" , "tourist")
bookings %>% mutate(for_business = factor(for_business , levels = lev ))
bookings %>% mutate(for_business = factor(for_business , TRUE = lev[1] ))
book <- bookings %>% pivot_wider(names_from = for_business , values_from = review_score) %>% select(review_score,TRUE,FALSE
book <- bookings %>% pivot_wider(names_from = for_business , values_from = review_score) %>% select(review_score,TRUE,FALSE)
book <- bookings %>% pivot_wider(names_from = for_business , values_from = review_score) %>% select(review_score,TRUE,FALSE)
book <- bookings %>% mutate(for_business = factor(for_business , levels = lev )) %>% pivot_wider(names_from = for_business , values_from = review_score) %>% select(review_score,TRUE,FALSE)
View(bookings)
ab<-bookings %>% mutate(for_business = factor(for_business , levels = lev ))
View(ab)
book <- bookings  %>% pivot_wider(names_from = for_business , values_from = review_score)
book <- bookings  %>% pivot_wider(names_from = for_business , values_from = review_score)  %>% select(TRUE,FALSE)
book <- bookings  %>% pivot_wider(names_from = for_business , values_from = review_score)  %>% select(bookings$TRUE,bookings$FALSE)
ab<-bookings %>% mutate(for_business = factor(for_business , levels = lev ))
View(ab)
View(bookings)
ab<-bookings %>% mutate(for_business = factor(for_business )
View(ab)
ab<-bookings %>% mutate(for_business = factor(for_business ))
View(ab)
ab<-bookings %>% mutate(for_business = factor(for_business , `levels<-`(TRUE="bbusiness")))
ab<-bookings %>% mutate(for_business = factor(for_business ))
View(ab)
ab<-bookings %>% mutate(for_business = factor(for_business , levels =   lev ))
View(ab)
ab<-bookings %>% mutate(for_business = factor(for_business ))
View(ab)
ab<-bookings %>% mutate(for_business = factor(for_business , levels = lev))
View(ab)
ab<-bookings %>% mutate(for_business = character(for_business , levels = lev))
ab<-bookings %>% mutate(for_business = character(for_business ))
ab<-bookings %>% mutate(for_business = as.character(for_business ))
View(ab)
ab<-bookings %>% mutate(for_business = as.factor(for_business ,levels = lev))
ab<-bookings %>% mutate(for_business = factor(for_business ,levels = lev))
ab<-bookings %>% mutate(for_business = factor(for_business ,levels = lev))
properties %>% head()
props <- properties %>%
separate(facilities, into = paste0("facility_", 1:9), sep = ",")
View(props)
library(dplyr)
library(gapminder)
gapminder
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point()
library(ggplot2)
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point()
library(xml2)
library(dplyr)
library(tidyverse)
files <- dir("~/VAST_Challenge/Labeled_data", recursive=TRUE, full.names=TRUE, pattern="\\.xml$")
file_number = 0
DF <- tibble(
filenames = character(),
x = double(),
y = double(),
Width = double(),
Height = double(),
Label = character()
)
for(file in files){
print("File number: %s\t%s ", file_number, file)
xmldoc <- read_xml(file, encoding = "utf-8", as_html = FALSE)
l<- c()
xml_value <- function(x) {
result <- xmldoc %>%
xml_find_all(x) %>%
xml_text()
return(result)
}
calculate_WandH <- function(max_value,min_value){
for( i in 1:length(max_value)) {
result <- max_value[[i]] - min_value[[i]]
l <- c(l,result)
}
return(l)
}
filenames <- tools::file_path_sans_ext(xml_value(".//filename"))
Label <- xml_value(".//name")
Xmin <- as.double(xml_value(".//xmin"))
Ymin <- as.double(xml_value(".//ymin"))
Xmax <- as.double(xml_value(".//xmax"))
Ymax<- as.double(xml_value(".//ymax"))
Width <- calculate_WandH(Xmax , Xmin)
Height <- calculate_WandH(Ymax , Ymin)
df <- tibble(filenames = filenames,x = Xmin, y = Ymin, Width = Width,Height = Height, Label = Label)
DF <- rbind(DF, df)
file_number = file_number + 1
}
PersonsRelatedObjs = DF  %>% mutate(Persons = str_replace(filenames, '_.*', '')) %>%  select(Persons, Label)
class(DF)
PersonsRelatedObjs %>% group_by(Label) %>% summarize(n = n())
PersonsRelatedObjs %>% count(Persons,Label)
View(PersonsRelatedObjs)
for(file in files){
# print("File number: %s\t%s ", file_number, file)
xmldoc <- read_xml(file, encoding = "utf-8", as_html = FALSE)
l<- c()
xml_value <- function(x) {
result <- xmldoc %>%
xml_find_all(x) %>%
xml_text()
return(result)
}
calculate_WandH <- function(max_value,min_value){
for( i in 1:length(max_value)) {
result <- max_value[[i]] - min_value[[i]]
l <- c(l,result)
}
return(l)
}
filenames <- tools::file_path_sans_ext(xml_value(".//filename"))
Label <- xml_value(".//name")
Xmin <- as.double(xml_value(".//xmin"))
Ymin <- as.double(xml_value(".//ymin"))
Xmax <- as.double(xml_value(".//xmax"))
Ymax<- as.double(xml_value(".//ymax"))
Width <- calculate_WandH(Xmax , Xmin)
Height <- calculate_WandH(Ymax , Ymin)
df <- tibble(filenames = filenames,x = Xmin, y = Ymin, Width = Width,Height = Height, Label = Label)
DF <- rbind(DF, df)
file_number = file_number + 1
}
PersonsRelatedObjs = DF  %>% mutate(Persons = str_replace(filenames, '_.*', '')) %>%  select(Persons, Label)
class(DF)
PersonsRelatedObjs %>% group_by(Label) %>% summarize(n = n())
PersonsRelatedObjs %>% count(Persons,Label)
View(PersonsRelatedObjs)
library(ggplot2)
View(PersonsRelatedObjs)
ggplot(data = PersonsRelatedObjs,
mapping = aes(x = Label, y = Persons)) +
geom_point()
ggplot(PersonsRelatedObjs) + geom_boxplot(
aes(x = Label, y = Persons),
size = 0.75
)
ggplot(data = PersonsRelatedObjs,
mapping = aes(x = Label, y = Persons)) +
geom_point()
ggplot(data = PersonsRelatedObjs,
mapping = aes(x = Label, y = Persons)) +
geom_point() + geom_smooth(method = "lm")
View(PersonsRelatedObjs)
View(DF)
View(PersonsRelatedObjs)
setwd("~/OVGU_Courses/DataScienceWithR/SubgroupClustering")
library(haven)
library(tidyverse)
library(mclust)
library(dplyr)
library(tidyr)
library(cluster)    # clustering algorithms
library(factoextra)
library(ggplot2)
library(hrbrthemes)
library(viridisLite)
library(viridis)
library(plotly)
library(reshape2)
# set your working directory or give path of the sav file
path = file.path( "MarketData.sav")
dataset = read_sav(path)
GetClusterResults <- function(df,LoopOverlist , addToDF){
for (i in 1:length(LoopOverlist)){
Z <- df %>% select(starts_with(LoopOverlist[i]))
Z.clustering <- kmeans(Z,5)
addToDF <- cbind(addToDF,Z.clustering$cluster)
colnames(addToDF)[ncol(addToDF)]<- paste(LoopOverlist[i],"clustering")
}
return(addToDF)
}
CreateEmptyDF <- function(){
return(data.frame(a=1:2303))
}
ReplaceNaInDF <- function(DF){
ColumnNamesList<- setNames(lapply(vector("list", ncol(DF)), function(x) x <- 0), names(DF))
return( DF %>% replace_na(ColumnNamesList))
}
GetUniqueColumnNames <- function(DF){
ColNames <- sub('\\_.*', "", colnames(DF))
return(unique(ColNames))
}
GetOptimumClustersElbowMethod <- function(df){
mydata <- df[,-1]
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 1:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
return(mydata)
}
KmeansClustering<- function(df ){
kmeans(df, centers = 2, nstart = 25)
}
GGplotting <- function(df){
p <- ggplot(df, aes(x=F3_Haupteinkaufsstaette, y=value,fill=variable))+
geom_boxplot()+
facet_grid(.~variable)+
labs(x="Edeka")+
theme(axis.title.x=element_text(angle=0, vjust=0.4,hjust=1),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# theme(axis.text.x=element_text(angle=-90, vjust=0.4,hjust=1),
#       axis.ticks.x=element_blank())
fig<- ggplotly(p)
fig
}
MainShoppingMall <-  dataset %>% select(starts_with("F3_"))
MainShoppingMall <- as_factor(MainShoppingMall)
ndist <-tapply(1:NROW(MainShoppingMall), MainShoppingMall$F3_Haupteinkaufsstaette, function(x) length(unique(x)))
ndist<- data.frame(ndist)
ndist <- rownames_to_column(ndist, "SuperMarketNames")
# customers = dataset[c(118:133,136:262,277:287)]
#
# satisfaction_wrt_productgroup = dataset[c(118:133)]
#
# SatisfactionMainShopping <-  dataset %>% select(starts_with("F7"))
IndividualGroupsSatisfaction <- dataset %>% select(F10_1_SORTIMENT_Global:F26_5_WARENPRAESENTATION_Gegenstaende)
IndvidualBranchSatisfaction  <- dataset %>% select(F27_1_MITARBEITER_1:F35_5_ATMOSPHAERE_EINLADEND_1)
customersLoyalty <- dataset %>% select(F8_1_EMPFEHLUNG_1:F9_NPS_1)
PriceAndQuality <- dataset %>% select(F40_1_REDUZIERTER_PREIS_1:F41_7_ERSTBESTE_1_invertiert)
# Now use that list in tidyr::replace_na
IndividualGroupsSatisfactionNa0 <- ReplaceNaInDF(IndividualGroupsSatisfaction)
IndividualGroupsSatisfactionUNiqColNames <- GetUniqueColumnNames(IndividualGroupsSatisfactionNa0)
INdividualSatisfactionClusters <- CreateEmptyDF()
q <- subset(IndividualGroupsSatisfactionUNiqColNames,IndividualGroupsSatisfactionUNiqColNames != "F13")
INdividualSatisfactionClusters<- GetClusterResults(IndividualGroupsSatisfactionNa0,q,INdividualSatisfactionClusters)
INdividualSatisfactionClusters$a<-NULL
colnames(INdividualSatisfactionClusters) <- c('Overall','Snacks','Regional','Vegan','Private','Branded','FruitVeggies',
'BreadnBaked','Flesh','Sausages','Dairy','Sweets','Alcoholic',
'Soft_Drinks' , 'Cosmetics' ,'Utensils')
INdividualSatisfactionClusters <- cbind(MainShoppingMall , INdividualSatisfactionClusters)
AllShoppingMarketNames <- rownames(ndist)
FilteredNdist <- ndist%>% filter(ndist >= 75)
FilteredShoppingMarketNames <- FilteredNdist$SuperMarketNames
FilteredMainShoopingMarkets<- INdividualSatisfactionClusters %>% filter(F3_Haupteinkaufsstaette %in% c('Edeka' , 'Kaufland'))
Edeka <- INdividualSatisfactionClusters %>%
filter(str_detect(F3_Haupteinkaufsstaette,'Edeka'))
DF <- GetOptimumClustersElbowMethod(INdividualSatisfactionClusters)
k2 <- KmeansClustering(DF )
INdividualSatisfactionClustersk2 <- k2$cluster
INdividualSatisfactionClustersk2 <- data.frame(INdividualSatisfactionClustersk2)
INdividualSatisfactionClusters <- cbind(INdividualSatisfactionClustersk2 , INdividualSatisfactionClusters)
View(INdividualSatisfactionClusters)
colnames(INdividualSatisfactionClusters) <- c('Overall','Snacks','Regional','Vegan','Private','Branded','FruitVeggies',
'BreadnBaked','Flesh','Sausages','Dairy','Sweets','Alcoholic',
'SoftDrinks' , 'Cosmetics' ,'Utensils')
fig <- plot_ly(data = INdividualSatisfactionClusters, x= F3_Haupteinkaufsstaette, y = "Regional", type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig <- plot_ly(data = INdividualSatisfactionClusters, x= INdividualSatisfactionClusters$F3_Haupteinkaufsstaette, y = "Regional", type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig
INdividualSatisfactionClusters <- CreateEmptyDF()
q <- subset(IndividualGroupsSatisfactionUNiqColNames,IndividualGroupsSatisfactionUNiqColNames != "F13")
INdividualSatisfactionClusters<- GetClusterResults(IndividualGroupsSatisfactionNa0,q,INdividualSatisfactionClusters)
INdividualSatisfactionClusters$a<-NULL
colnames(INdividualSatisfactionClusters) <- c('Overall','Snacks','Regional','Vegan','Private','Branded','FruitVeggies',
'BreadnBaked','Flesh','Sausages','Dairy','Sweets','Alcoholic',
'SoftDrinks' , 'Cosmetics' ,'Utensils')
INdividualSatisfactionClusters <- cbind(MainShoppingMall , INdividualSatisfactionClusters)
AllShoppingMarketNames <- rownames(ndist)
FilteredNdist <- ndist%>% filter(ndist >= 75)
FilteredShoppingMarketNames <- FilteredNdist$SuperMarketNames
FilteredMainShoopingMarkets<- INdividualSatisfactionClusters %>% filter(F3_Haupteinkaufsstaette %in% c('Edeka' , 'Kaufland'))
Edeka <- INdividualSatisfactionClusters %>%
filter(str_detect(F3_Haupteinkaufsstaette,'Edeka'))
DF <- GetOptimumClustersElbowMethod(INdividualSatisfactionClusters)
k2 <- KmeansClustering(DF )
INdividualSatisfactionClustersk2 <- k2$cluster
INdividualSatisfactionClustersk2 <- data.frame(INdividualSatisfactionClustersk2)
INdividualSatisfactionClusters <- cbind(INdividualSatisfactionClustersk2 , INdividualSatisfactionClusters)
fig <- plot_ly(data = INdividualSatisfactionClusters, x= INdividualSatisfactionClusters$INdividualSatisfactionClustersk2, y = INdividualSatisfactionClusters$Regional, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig
fig <- plot_ly(data = INdividualSatisfactionClusters, x= INdividualSatisfactionClusters$F3_Haupteinkaufsstaette, y = "Regional", type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig
fig <- plot_ly(data = INdividualSatisfactionClusters, x= INdividualSatisfactionClusters$F3_Haupteinkaufsstaette, y = INdividualSatisfactionClusters$Regional, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig
fig <- plot_ly(data = INdividualSatisfactionClusters, x= INdividualSatisfactionClusters$F3_Haupteinkaufsstaette, y = INdividualSatisfactionClusters$Snacks, type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig
INdividualSatisfactionClusters["Snacks"]
fig <- plot_ly(data = INdividualSatisfactionClusters, x= INdividualSatisfactionClusters$F3_Haupteinkaufsstaette, y = INdividualSatisfactionClusters["Snacks"], type = "box", boxpoints = "all", jitter = 0.3,
pointpos = -1.8)
fig
p1 <- INdividualSatisfactionClusters %>% ggplot(aes(x = F3_Haupteinkaufsstaette, y = Alcoholic_drinks, fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
geom_point(position = position_jitterdodge(jitter.width = 0),
aes(color = factor(wt)), show.legend = FALSE)
p1
View(INdividualSatisfactionClusters)
p1 <- INdividualSatisfactionClusters %>% ggplot(aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
geom_point(position = position_jitterdodge(jitter.width = 0),
aes(color = factor(wt)), show.legend = FALSE)
p1
p1 <- INdividualSatisfactionClusters %>% ggplot(aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
geom_point(position = position_jitterdodge(jitter.width = 0))
p1
p<- ggplot(data = INdividualSatisfactionClusters, aes(x=F3_Haupteinkaufsstaette, y=Snacks, fill=F3_Haupteinkaufsstaette)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.5) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x=element_text(angle=-90, vjust=0.4,hjust=1),
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
fig <- ggplotly(p)
fig
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
geom_point(position = position_jitterdodge(jitter.width = 0))
p1
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
geom_point(position = position_jitterdodge(jitter.width = 0.5))
p1
f <- ggplotly(p1)
f
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
theme_ipsum() +
scale_fill_viridis(discrete = TRUE, alpha=0.5) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
geom_point(position = position_jitterdodge(jitter.width = 0.5))
f <- ggplotly(p1)
f
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.5) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
geom_point(position = position_jitterdodge(jitter.width = 0.5))
f <- ggplotly(p1)
f
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
theme_ipsum() +
scale_fill_viridis(discrete = TRUE, alpha=0.5) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
geom_point(position = position_jitterdodge(jitter.width = 0.5))
f <- ggplotly(p1)
f
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
theme_ipsum() +
scale_fill_viridis(discrete = TRUE, alpha=0.5) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
geom_point(position = position_jitterdodge(jitter.width = 0.5))
f <- ggplotly(p1)
p1 <- ggplot(data = INdividualSatisfactionClusters,aes(x = F3_Haupteinkaufsstaette, y =Regional , fill = F3_Haupteinkaufsstaette)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.5) +
geom_point(position = position_jitterdodge(jitter.width = 0.5))
f <- ggplotly(p1)
f
View(ndist)
p10 <- ggplot(data = INdividualSatisfactionClusters, aes(x = F3_Haupteinkaufsstaette,
y = input$FeatureName)) +
geom_boxplot(fill = fill, colour = line,
outlier.colour = "#1F3552", outlier.shape = 20) +
scale_y_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(0, 175, 25),
limits=c(0, 175)) +
scale_x_discrete(name = "Month") +
ggtitle("Boxplot of mean ozone by month")
p10
p10 <- ggplot(data = INdividualSatisfactionClusters, aes(x = F3_Haupteinkaufsstaette,
y = Regional)) +
geom_boxplot(fill = fill, colour = line,
outlier.colour = "#1F3552", outlier.shape = 20) +
scale_y_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(0, 175, 25),
limits=c(0, 175)) +
scale_x_discrete(name = "Month") +
ggtitle("Boxplot of mean ozone by month")
p10
GGplotting(dfmelt)
count(INdividualBranchSatisfactionClusters)
View(INdividualSatisfactionClusters)
View(INdividualSatisfactionClusters)
count(INdividualSatisfactionClusters)
summarise(INdividualSatisfactionClusters)
count(INdividualSatisfactionClusters)
summary(INdividualSatisfactionClusters)
df <- df[,-1]
# File Imports
path = getwd()
setwd("~/VersionControl/Git/DataScienceWithR---Market-Research/FinalReport")
# File Imports
path = getwd()
BasicDF <- read.csv(paste0(path,'/DataFrames/BasicIndividualGroupsSatisfactionClusters.csv'))
